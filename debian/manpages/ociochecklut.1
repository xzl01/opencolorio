.TH OCIOCHECKLUT "1" "August 2023" "ociochecklut -- check any LUT file and optionally convert a pixel" "User Commands"
.SH NAME
ociochecklut \- check any LUT file and optionally convert a pixel
.PP
usage:  ociochecklut <INPUTFILE> <R G B> or <R G B A>
.SH OPTIONS
.TP
\fB\-t\fR
Test a set a predefined RGB values
.TP
\fB\-v\fR
Verbose
.TP
\fB\-\-help\fR
Print help message
.TP
\fB\-\-inv\fR
Apply LUT in inverse direction
.TP
\fB\-\-gpu\fR
Use GPU instead of CPU
.TP
\fB\-\-gpulegacy\fR
Use the legacy (i.e. baked) GPU color processing instead of the CPU one (\fB\-\-gpu\fR is ignored)
.TP
\fB\-\-gpuinfo\fR
Output the OCIO shader program
.PP
OCIOCHECKLUT loads any LUT type supported by OCIO and prints any errors
encountered.  Provide a normalized RGB or RGBA value to send that through
the LUT.  Alternatively use the \fB\-t\fR option to evaluate a set of test values.
Otherwise, if no RGB value is provided, a list of the operators in the LUT is printed.
Use \fB\-v\fR to print warnings while parsing the LUT.
.PP
Formats supported:
flame (.3dl)
lustre (.3dl)
ColorCorrection (.cc)
ColorCorrectionCollection (.ccc)
ColorDecisionList (.cdl)
Academy/ASC Common LUT Format (.clf)
Color Transform Format (.ctf)
cinespace (.csp)
Discreet 1D LUT (.lut)
houdini (.lut)
International Color Consortium profile (.icc)
Image Color Matching profile (.icm)
ICC profile (.pf)
iridas_cube (.cube)
iridas_itx (.itx)
iridas_look (.look)
pandora_mga (.mga)
pandora_m3d (.m3d)
resolve_cube (.cube)
spi1d (.spi1d)
spi3d (.spi3d)
spimtx (.spimtx)
truelight (.cub)
nukevf (.vf)
